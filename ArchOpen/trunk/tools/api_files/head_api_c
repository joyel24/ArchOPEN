/*
*   kernel/lib/api.c
*
*   MediOS project
*   Copyright (c) 2005 by Christophe THOMAS (oxygen77 at free.fr)
*
* All files in this archive are subject to the GNU General Public License.
* See the file COPYING in the source tree root for full license agreement.
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express of implied.
*/

#include <api.h>
#include <kernel/swi.h>
#include <sys_def/errors.h>

unsigned int api_getFctPtr(char * name)    { swi_call(nAPI_INIAPI); }

/* libfloat stuff */

long __modsi3(long a, long b) { return float_modsi3(a,b); }
long __umodsi3(long a, long b) { return float_umodsi3(a,b); }
long __divsi3(long a, long b) { return float_divsi3(a,b); }
long __udivsi3(long a, long b) { return float_udivsi3(a,b); }
long long __divdi3(long long a,long long b) { return float_divdi3(a,b); }

long long __fixsfdi (float a) {return float_fixsfdi(a); }
long long __moddi3(long long  a, long long  b) {return float_moddi3(a,b);}
long long __ashrdi3(long long  a, unsigned int b) {return float_ashrdi3(a,b);}
long long __ashldi3(long long  a, unsigned int b) {return float_ashldi3(a,b);}

float __addsf3 (float a, float b) { return float_addsf3(a,b); }
float __subsf3 (float a, float b) { return float_subsf3(a,b); }
float __mulsf3 (float a, float b) { return float_mulsf3(a,b); }
float __divsf3 (float a, float b) { return float_divsf3(a,b); }
double __floatsidf (register long a) { return float_floatsidf(a); }
double __floatdidf (register long long a) { return float_floatdidf(a); }
float __floatsisf (register long  a) { return float_floatsisf(a); }
float __floatdisf (register long long  a) { return float_floatdisf(a); }
float __negsf2 (float a) { return float_negsf2(a); }
double __negdf2 (double a) { return float_negdf2(a); }
double __extendsfdf2 (float a) { return float_extendsfdf2(a); }
float __truncdfsf2 (double a) { return float_truncdfsf2(a); }
long __fixsfsi (float a) { return float_fixsfsi(a); }
long __fixdfsi (double a) { return float_fixdfsi(a); }
long long __fixdfdi (double a) { return float_fixdfdi(a); }
unsigned long __fixunsdfsi (double a) { return float_fixunsdfsi(a); }
unsigned long long __fixunsdfdi (double a) { return float_fixunsdfdi(a); }
double __adddf3 (double a, double b) { return float_adddf3(a,b); }
double __subdf3 (double a, double b) { return float_subdf3(a,b); }
double __muldf3 (double a, double b) { return float_muldf3(a,b); }
double __divdf3 (double a, double b) { return float_divdf3(a,b); }
int __gtdf2 (double a, double b) { return float_gtdf2(a,b); }
int __gedf2 (double a, double b) { return float_gedf2(a,b); }
int __ltdf2 (double a, double b) { return float_ltdf2(a,b); }
int __ledf2 (double a, double b) { return float_ledf2(a,b); }
int __eqdf2 (double a, double b) { return float_eqdf2(a,b); }
int __nedf2 (double a, double b) { return float_nedf2(a,b); }
int __gtsf2 (float a, float b) { return float_gtsf2(a,b); }
int __gesf2 (float a, float b) { return float_gesf2(a,b); }
int __ltsf2 (float a, float b) { return float_ltsf2(a,b); }
int __lesf2 (float a, float b) { return float_lesf2(a,b); }
int __eqsf2 (float a, float b) { return float_eqsf2(a,b); }
int __nesf2 (float a, float b) { return float_nesf2(a,b); }

double cos(double a) { return math_cos(a); }
double sqrt(double a) { return math_sqrt(a); }
double tan(double a) { return math_tan(a); }

unsigned char * _ctype;

void ini_api(void)
{
    _ctype = (char*)api_getFctPtr("_ctype");
